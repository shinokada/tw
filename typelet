#!/usr/bin/env bash

version="0.3.7"
script_name=$(basename "$0")
font="standard"
colorop=2
speed="0.0"
createop=""
tmp_file="/tmp/typelet-file"
spaceop=0
interval=2

abort() {
    echo "$*" >&2
    exit 1
}
required() { [ $# -gt 1 ] || abort "option '$1' requires an argument"; }

usage() {
    cat <<EOF

 _____                 _      _
|_   _|   _ _ __   ___| | ___| |_
  | || | | | '_ \ / _ \ |/ _ \ __|
  | || |_| | |_) |  __/ |  __/ |_
  |_| \__, | .__/ \___|_|\___|\__|
      |___/|_|

      
Description:
$script_name creates, adds, print a large words like a typewriter.
$script_name can save to/from a Gist and print.

Usage:

Create a file
$script_name create Typewriter -f banner -s 10


Add a line
$script_name add Print -f banner -s 10

Spaces
Add spaces in front of a word
$script_name create "     Awesome"
Add spaces to all lines
$script_name space 20


Add a empty line
$script_name empty


Read a file
$script_name read


Print it
$script_name print
$script_name -c 1 -i 3 print
$script_name --color 1 -i 3 print


Save it to a Gist
$script_name gist


Save to local from a Gist
$script_name url https://gist.github.com/shinokada/f7996e53914bc55854d2a800ec20ef82


Print version
$script_name -v

Print help
$script_name -h


EOF
}

check_cmd() {
    if [[ ! $(command -v "$1") ]]; then
        if [[ $1 = "code" ]]; then
            app="VS Code"
        else
            app=$1
        fi
        echo "It seems like you don't have ${app}."
        echo "Please install ${app}."
        exit 1
    fi
}

check_cmd figlet

# Repeat given char N times using shell function
repeat() {
    local start end str range
    start=1
    end=${1:-80}
    str="${2:-=}"
    range=$(seq $start "$end")
    for i in $range; do echo -n "${str}"; done
}

find_inteval() {
    case $1 in
    1) speed=0.0$(((RANDOM % 9) + 1)) ;;
    2) speed=0.00$(((RANDOM % 9) + 1)) ;;
    3) speed=0.000$(((RANDOM % 9) + 1)) ;;
    *)
        usage
        exit
        ;;
    esac
}

fn_read() {
    cat "$tmp_file"
}

save_to_gist() {
    check_cmd gh
    echo "Saving to gist ..."
    gh gist create -w -p -f "my-tylet" -d "Created by tylet." <$tmp_file || exit
}

create_raw() {
    regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    if [[ ${1} =~ $regex ]]; then
        if [[ $(curl --silent --head --fail "${1}/raw") ]]; then
            # echo "URL exists: ${1}/raw"
            echo "$(curl -L --silent "${1}/raw")"
        else
            echo "URL does not exist: ${1}"
        fi
    else
        echo "Link not valid."
    fi
}

save_to_local() {
    echo "Saving from gist to a local."
    echo "URL: $1"
    if [ "$1" ]; then
        url=$1
        create_raw "$url" >$tmp_file
        echo "Save to the local file."
        echo "Now you can print it."
        exit
    else
        echo "Please provide your list URL."
        exit 1
    fi
}

fn_empty() {
    echo >>$tmp_file
}

fn_open() {
    if [[ $1 = "v" ]]; then
        check_cmd code || exit
        code $tmp_file
    else
        "${EDITOR:-vi}" $tmp_file
    fi
}

fn_add_spaces() {
    spaceop=$1
    # adding spaces in front of all lines
    if ((spaceop > 0)); then
        echo "adding spaces..."
        space_num=$(repeat "$spaceop" " ")
        # echo "$space_num"
        sed -i -e "s/^/$space_num/" $tmp_file
    fi
}

fn_create() {
    # if [[ -z $word ]]; then
    #     echo "Please specify a word using -w."
    #     exit
    # fi
    echo "Creating $word with $font font."
    touch $tmp_file
    figlet -f "$font" "$word" >$tmp_file
    cat $tmp_file
    # fn_replace
}

fn_add() {
    # if [[ -z $word ]]; then
    #     echo "Please specify a word using -w."
    #     exit
    # fi
    echo "Adding $word with $font font."
    figlet -f "$font" "$word" >>$tmp_file
    echo
    echo
    cat $tmp_file
    # fn_replace
}

fn_print() {
    echo
    echo
    find_inteval "$interval"
    word=$(cat $tmp_file)
    tput setaf "$colorop"
    for ((i = 0; i <= ${#word}; i++)); do
        printf '%s' "${word:$i:1}"
        sleep "$speed"
    done
    tput sgr0
    echo
    echo
    sleep 1
}

if [[ -n $createop ]]; then
    create
    exit
fi

while (($# > 0)); do
    case $1 in
    -f | --font)
        required "$@" && shift
        font="$1"
        ;;
    -i | --interval)
        required "$@" && shift
        interval=$1
        ;;
    -c | --color)
        required "$@" && shift
        colorop=$1
        ;;
    create)
        required "$@" && shift
        fn_create "$1"
        exit
        ;;
    add)
        required "$@" && shift
        fn_add "$1"
        shift 2
        ;;
    open)
        required "$@" && shift
        fn_open "$1"
        exit
        ;;
    print)
        fn_print
        exit
        ;;
    read)
        fn_read
        exit
        ;;
    space)
        required "$@" && shift
        fn_add_spaces "$1"
        exit
        ;;
    gist)
        save_to_gist
        exit
        ;;
    url)
        required "$@" && shift
        save_to_local "$2"
        exit
        ;;
    empty)
        fn_empty
        exit
        ;;
    -h | --help)
        usage
        exit
        ;;
    -v | --version)
        echo "${version}"
        exit
        ;;
    -?*) unknown "$@" ;;
    *) break ;;
    esac
    shift
done
